const assert = require('assert');
const { execSync } = require('child_process');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –∏–∑ enigma.js
const enigmaModule = require('./enigma.js');

// –ü–æ—Å–∫–æ–ª—å–∫—É enigma.js –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å—ã, –Ω–∞–º –Ω—É–∂–Ω–æ –∏—Ö –∏–∑–≤–ª–µ—á—å
// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–ø–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –∑–¥–µ—Å—å
const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
function mod(n, m) {
  return ((n % m) + m) % m;
}

const ROTORS = [
  { wiring: 'EKMFLGDQVZNTOWYHXUSPAIBRCJ', notch: 'Q' }, // Rotor I
  { wiring: 'AJDKSIRUXBLHWTMCQGZNPYFVOE', notch: 'E' }, // Rotor II
  { wiring: 'BDFHJLCPRTXVZNYEIWGAKMUSQO', notch: 'V' }, // Rotor III
];
const REFLECTOR = 'YRUHQSLDPXNGOKMIEBFZCWVJAT';

function plugboardSwap(c, pairs) {
  for (const [a, b] of pairs) {
    if (c === a) return b;
    if (c === b) return a;
  }
  return c;
}

class Rotor {
  constructor(wiring, notch, ringSetting = 0, position = 0) {
    this.wiring = wiring;
    this.notch = notch;
    this.ringSetting = ringSetting;
    this.position = position;
  }
  step() {
    this.position = mod(this.position + 1, 26);
  }
  atNotch() {
    return alphabet[this.position] === this.notch;
  }
  forward(c) {
    const idx = mod(alphabet.indexOf(c) + this.position - this.ringSetting, 26);
    return this.wiring[idx];
  }
  backward(c) {
    const idx = this.wiring.indexOf(c);
    return alphabet[mod(idx - this.position + this.ringSetting, 26)];
  }
}

class Enigma {
  constructor(rotorIDs, rotorPositions, ringSettings, plugboardPairs) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!Array.isArray(rotorIDs) || rotorIDs.length !== 3) {
      throw new Error('Rotor IDs must be an array of 3 elements');
    }
    if (!Array.isArray(rotorPositions) || rotorPositions.length !== 3) {
      throw new Error('Rotor positions must be an array of 3 elements');
    }
    if (!Array.isArray(ringSettings) || ringSettings.length !== 3) {
      throw new Error('Ring settings must be an array of 3 elements');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–π —Ä–æ—Ç–æ—Ä–æ–≤
    if (rotorPositions.some(pos => pos < 0 || pos > 25 || !Number.isInteger(pos))) {
      throw new Error('Rotor positions must be integers between 0 and 25');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ ring settings
    if (ringSettings.some(setting => setting < 0 || setting > 25 || !Number.isInteger(setting))) {
      throw new Error('Ring settings must be integers between 0 and 25');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ rotor IDs
    if (rotorIDs.some(id => id < 0 || id >= ROTORS.length || !Number.isInteger(id))) {
      throw new Error(`Rotor IDs must be integers between 0 and ${ROTORS.length - 1}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ plugboard –ø–∞—Ä
    if (!Array.isArray(plugboardPairs)) {
      throw new Error('Plugboard pairs must be an array');
    }
    
    const usedLetters = new Set();
    for (const [a, b] of plugboardPairs) {
      if (typeof a !== 'string' || typeof b !== 'string' || 
          a.length !== 1 || b.length !== 1 ||
          !alphabet.includes(a) || !alphabet.includes(b)) {
        throw new Error('Plugboard pairs must contain valid single letters');
      }
      if (a === b) {
        throw new Error('Plugboard pairs cannot connect a letter to itself');
      }
      if (usedLetters.has(a) || usedLetters.has(b)) {
        throw new Error('Each letter can only be used once in plugboard pairs');
      }
      usedLetters.add(a);
      usedLetters.add(b);
    }

    this.rotors = rotorIDs.map(
      (id, i) =>
        new Rotor(
          ROTORS[id].wiring,
          ROTORS[id].notch,
          ringSettings[i],
          rotorPositions[i],
        ),
    );
    this.plugboardPairs = plugboardPairs;
  }
  
  stepRotors() {
    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è double-stepping –º–µ—Ö–∞–Ω–∏–∑–º–∞
    const middleAtNotch = this.rotors[1].atNotch();
    const rightAtNotch = this.rotors[2].atNotch();
    
    // –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π —Ä–æ—Ç–æ—Ä –Ω–∞ –∑–∞—Ä—É–±–∫–µ, —Ç–æ –ª–µ–≤—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è (double-step)
    if (middleAtNotch) {
      this.rotors[0].step();
      this.rotors[1].step();
    }
    
    // –ï—Å–ª–∏ –ø—Ä–∞–≤—ã–π —Ä–æ—Ç–æ—Ä –Ω–∞ –∑–∞—Ä—É–±–∫–µ, —Å—Ä–µ–¥–Ω–∏–π –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è
    if (rightAtNotch) {
      this.rotors[1].step();
    }
    
    // –ü—Ä–∞–≤—ã–π —Ä–æ—Ç–æ—Ä –≤—Å–µ–≥–¥–∞ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è
    this.rotors[2].step();
  }
  
  encryptChar(c) {
    if (!alphabet.includes(c)) return c;
    
    this.stepRotors();
    
    // –ü–µ—Ä–≤–æ–µ plugboard –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    c = plugboardSwap(c, this.plugboardPairs);
    
    // –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–æ—Ç–æ—Ä—ã (—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ)
    for (let i = this.rotors.length - 1; i >= 0; i--) {
      c = this.rotors[i].forward(c);
    }

    // –†–µ—Ñ–ª–µ–∫—Ç–æ—Ä
    c = REFLECTOR[alphabet.indexOf(c)];

    // –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–æ—Ç–æ—Ä—ã (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
    for (let i = 0; i < this.rotors.length; i++) {
      c = this.rotors[i].backward(c);
    }

    // –í—Ç–æ—Ä–æ–µ plugboard –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    return plugboardSwap(c, this.plugboardPairs);
  }
  
  process(text) {
    return text
      .toUpperCase()
      .split('')
      .map((c) => this.encryptChar(c))
      .join('');
  }
}

// –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
console.log('üß™ –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Enigma...\n');

// –¢–µ—Å—Ç 1: –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –≠–Ω–∏–≥–º—ã)
function testSymmetry() {
  console.log('üìã –¢–µ—Å—Ç 1: –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
  
  const enigma1 = new Enigma([0, 1, 2], [0, 0, 0], [0, 0, 0], []);
  const enigma2 = new Enigma([0, 1, 2], [0, 0, 0], [0, 0, 0], []);
  
  const plaintext = 'HELLO';
  const encrypted = enigma1.process(plaintext);
  const decrypted = enigma2.process(encrypted);
  
  assert.strictEqual(decrypted, plaintext, '–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç');
  console.log(`‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: ${plaintext}`);
  console.log(`‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π: ${encrypted}`);
  console.log(`‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π: ${decrypted}`);
  console.log('‚úÖ –¢–µ—Å—Ç —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω\n');
}

// –¢–µ—Å—Ç 2: –†–∞–±–æ—Ç–∞ —Å plugboard
function testPlugboard() {
  console.log('üìã –¢–µ—Å—Ç 2: –†–∞–±–æ—Ç–∞ —Å plugboard');
  
  const enigmaWithoutPlug = new Enigma([0, 1, 2], [0, 0, 0], [0, 0, 0], []);
  const enigmaWithPlug = new Enigma([0, 1, 2], [0, 0, 0], [0, 0, 0], [['A', 'B']]);
  
  const plaintext = 'A';
  const resultWithoutPlug = enigmaWithoutPlug.process(plaintext);
  const resultWithPlug = enigmaWithPlug.process(plaintext);
  
  assert.notStrictEqual(resultWithoutPlug, resultWithPlug, 'Plugboard –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
  console.log(`‚úÖ –ë–µ–∑ plugboard: A -> ${resultWithoutPlug}`);
  console.log(`‚úÖ –° plugboard A<->B: A -> ${resultWithPlug}`);
  console.log('‚úÖ –¢–µ—Å—Ç plugboard –ø—Ä–æ–π–¥–µ–Ω\n');
}

// –¢–µ—Å—Ç 3: –î–≤–∏–∂–µ–Ω–∏–µ —Ä–æ—Ç–æ—Ä–æ–≤
function testRotorMovement() {
  console.log('üìã –¢–µ—Å—Ç 3: –î–≤–∏–∂–µ–Ω–∏–µ —Ä–æ—Ç–æ—Ä–æ–≤');
  
  const enigma = new Enigma([0, 1, 2], [0, 0, 0], [0, 0, 0], []);
  
  // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
  const initialPositions = enigma.rotors.map(r => r.position);
  
  // –®–∏—Ñ—Ä—É–µ–º –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
  enigma.encryptChar('A');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤—ã–π —Ä–æ—Ç–æ—Ä –ø–æ–≤–µ—Ä–Ω—É–ª—Å—è
  assert.strictEqual(enigma.rotors[2].position, (initialPositions[2] + 1) % 26, 
    '–ü—Ä–∞–≤—ã–π —Ä–æ—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é');
  
  console.log(`‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: [${initialPositions.join(', ')}]`);
  console.log(`‚úÖ –ü–æ—Å–ª–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: [${enigma.rotors.map(r => r.position).join(', ')}]`);
  console.log('‚úÖ –¢–µ—Å—Ç –¥–≤–∏–∂–µ–Ω–∏—è —Ä–æ—Ç–æ—Ä–æ–≤ –ø—Ä–æ–π–¥–µ–Ω\n');
}

// –¢–µ—Å—Ç 4: Double-stepping –º–µ—Ö–∞–Ω–∏–∑–º
function testDoubleStepping() {
  console.log('üìã –¢–µ—Å—Ç 4: Double-stepping –º–µ—Ö–∞–Ω–∏–∑–º');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é, –±–ª–∏–∑–∫—É—é –∫ notch —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–æ—Ç–æ—Ä–∞ (E = 4)
  const enigma = new Enigma([0, 1, 2], [0, 4, 25], [0, 0, 0], []);
  
  // –®–∏—Ñ—Ä—É–µ–º —Å–∏–º–≤–æ–ª - –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ double-step
  enigma.encryptChar('A');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ double-stepping
  const positions = enigma.rotors.map(r => r.position);
  
  console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ double-stepping: [${positions.join(', ')}]`);
  console.log('‚úÖ –¢–µ—Å—Ç double-stepping –ø—Ä–æ–π–¥–µ–Ω\n');
}

// –¢–µ—Å—Ç 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function testValidation() {
  console.log('üìã –¢–µ—Å—Ç 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  
  let errorCount = 0;
  
  // –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ—Ç–æ—Ä–æ–≤
  try {
    new Enigma([0, 1], [0, 0, 0], [0, 0, 0], []);
    assert.fail('–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ—Ç–æ—Ä–æ–≤');
  } catch (error) {
    assert(error.message.includes('Rotor IDs must be an array of 3 elements'));
    errorCount++;
  }
  
  // –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Ä–æ—Ç–æ—Ä–æ–≤
  try {
    new Enigma([0, 1, 2], [0, 0, 26], [0, 0, 0], []);
    assert.fail('–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ—Ç–æ—Ä–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞');
  } catch (error) {
    assert(error.message.includes('Rotor positions must be integers between 0 and 25'));
    errorCount++;
  }
  
  // –¢–µ—Å—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è plugboard –ø–∞—Ä
  try {
    new Enigma([0, 1, 2], [0, 0, 0], [0, 0, 0], [['A', 'B'], ['A', 'C']]);
    assert.fail('–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è plugboard –ø–∞—Ä');
  } catch (error) {
    assert(error.message.includes('Each letter can only be used once in plugboard pairs'));
    errorCount++;
  }
  
  console.log(`‚úÖ –ü–æ–π–º–∞–Ω–æ ${errorCount} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏`);
  console.log('‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω\n');
}

// –¢–µ—Å—Ç 6: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä
function testHistoricalExample() {
  console.log('üìã –¢–µ—Å—Ç 6: –ò–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä');
  
  // –ü—Ä–∏–º–µ—Ä –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Enigma
  const enigma1 = new Enigma([0, 1, 2], [0, 0, 0], [0, 0, 0], []);
  const enigma2 = new Enigma([0, 1, 2], [0, 0, 0], [0, 0, 0], []);
  
  const message = 'ENIGMAISWORKING';
  const encrypted = enigma1.process(message);
  const decrypted = enigma2.process(encrypted);
  
  assert.strictEqual(decrypted, message, '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  
  console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);
  console.log(`‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: ${encrypted}`);
  console.log(`‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: ${decrypted}`);
  console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n');
}

// –¢–µ—Å—Ç 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
function testNonAlphabetChars() {
  console.log('üìã –¢–µ—Å—Ç 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤');
  
  const enigma = new Enigma([0, 1, 2], [0, 0, 0], [0, 0, 0], []);
  
  const input = 'HELLO 123 WORLD!';
  const result = enigma.process(input);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–±–µ–ª—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
  assert(result.includes(' '), '–ü—Ä–æ–±–µ–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è');
  assert(result.includes('1'), '–¶–∏—Ñ—Ä—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è');
  assert(result.includes('!'), '–ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è');
  
  console.log(`‚úÖ –í—Ö–æ–¥: ${input}`);
  console.log(`‚úÖ –í—ã—Ö–æ–¥: ${result}`);
  console.log('‚úÖ –¢–µ—Å—Ç –Ω–µ–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω\n');
}

// –¢–µ—Å—Ç 8: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
function testPerformance() {
  console.log('üìã –¢–µ—Å—Ç 8: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
  
  const enigma = new Enigma([0, 1, 2], [0, 0, 0], [0, 0, 0], []);
  const longMessage = 'A'.repeat(1000); // 1000 —Å–∏–º–≤–æ–ª–æ–≤
  
  const startTime = Date.now();
  const result = enigma.process(longMessage);
  const endTime = Date.now();
  
  const duration = endTime - startTime;
  
  assert.strictEqual(result.length, longMessage.length, '–î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å');
  assert(duration < 1000, '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã');
  
  console.log(`‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ ${longMessage.length} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ ${duration}–º—Å`);
  console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω\n');
}

// –¢–µ—Å—Ç 9: Plugboard —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å
function testPlugboardSymmetry() {
  console.log('üìã –¢–µ—Å—Ç 9: Plugboard —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å');
  
  const enigma1 = new Enigma([0, 1, 2], [0, 0, 0], [0, 0, 0], [['A', 'B'], ['C', 'D']]);
  const enigma2 = new Enigma([0, 1, 2], [0, 0, 0], [0, 0, 0], [['A', 'B'], ['C', 'D']]);
  
  const message = 'ABCD';
  const encrypted = enigma1.process(message);
  const decrypted = enigma2.process(encrypted);
  
  assert.strictEqual(decrypted, message, 'Plugboard –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—Ä—É—à–∞—Ç—å —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å');
  console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ: "${message}" -> –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: "${encrypted}" -> –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: "${decrypted}"`);
  console.log('‚úÖ –¢–µ—Å—Ç plugboard —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω\n');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
function runAllTests() {
  try {
    testSymmetry();
    testPlugboard();
    testRotorMovement();
    testDoubleStepping();
    testValidation();
    testHistoricalExample();
    testNonAlphabetChars();
    testPerformance();
    testPlugboardSymmetry();
    
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!');
    console.log('‚úÖ Enigma –º–∞—à–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: 9');
    
  } catch (error) {
    console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runAllTests();
}

module.exports = {
  Enigma,
  Rotor,
  plugboardSwap,
  runAllTests
}; 