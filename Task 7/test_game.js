import { Player } from './src/models/Player.js';
import { PLAYER_TYPES } from './src/constants/GameConstants.js';

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∫–∏ –∏–≥—Ä—ã
 */
async function testMechanics() {
  console.log('üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–•–ê–ù–ò–ö–ò "–ú–û–†–°–ö–û–ô –ë–û–ô"\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤
    const player1 = new Player('Player', PLAYER_TYPES.HUMAN, 10);
    const player2 = new Player('CPU', PLAYER_TYPES.AI, 10);
    
    // –†–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª–∏
    console.log('üö¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π...');
    const ships1 = await player1.placeShips(3, 3);
    const ships2 = await player2.placeShips(3, 3);
    
    if (!ships1 || !ships2) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª–∏');
    }
    
    console.log('‚úÖ –ö–æ—Ä–∞–±–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 12, 23, 55
    const testCoords = [
      { row: 1, col: 2, name: '12' },
      { row: 2, col: 3, name: '23' },
      { row: 5, col: 5, name: '55' }
    ];
    
    console.log('\n--- –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–¢–ê–ö ---');
    
    for (const coord of testCoords) {
      console.log(`\nüéØ –ê—Ç–∞–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ${coord.name}`);
      
      const result = await player1.performAttack(coord.row, coord.col, player2);
      console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.hit ? '–ü–û–ü–ê–î–ê–ù–ò–ï ‚úÖ' : '–ü–†–û–ú–ê–• ‚ùå'}`);
      
      if (result.sunk) {
        console.log('üî• –ö–û–†–ê–ë–õ–¨ –ü–û–¢–û–ü–õ–ï–ù!');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      const opponentView = player1.getOpponentBoard().getGrid();
      const cellState = opponentView[coord.row][coord.col];
      const expectedState = result.hit ? 'X' : 'O';
      
      console.log(`–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${cellState} ${cellState === expectedState ? '‚úÖ' : '‚ùå'}`);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π
    console.log('\n--- –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–ï–ô ---');
    const playerBoard = player1.getOwnBoard().getGrid();
    const opponentView = player1.getOpponentBoard().getGrid();
    
    displayBoards(playerBoard, opponentView);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–µ
    console.log('\n--- –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –ò–ì–†–ï ---');
    checkOriginalCompliance();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

function displayBoards(playerBoard, opponentBoard) {
  console.log('\n   --- OPPONENT BOARD ---          --- YOUR BOARD ---');
  const header = '  0 1 2 3 4 5 6 7 8 9 ';
  console.log(header + '     ' + header);

  for (let row = 0; row < 10; row++) {
    let rowDisplay = row + ' ';

    // –ü–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    for (let col = 0; col < 10; col++) {
      rowDisplay += opponentBoard[row][col] + ' ';
    }
    rowDisplay += '    ' + row + ' ';

    // –ü–æ–ª–µ –∏–≥—Ä–æ–∫–∞
    for (let col = 0; col < 10; col++) {
      rowDisplay += playerBoard[row][col] + ' ';
    }
    console.log(rowDisplay);
  }
}

function checkOriginalCompliance() {
  console.log('‚úÖ –†–∞–∑–º–µ—Ä –ø–æ–ª—è: 10x10 (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)');
  console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–∞–±–ª–µ–π: 3 (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)');
  console.log('‚úÖ –î–ª–∏–Ω–∞ –∫–æ—Ä–∞–±–ª–µ–π: 3 (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)');
  console.log('‚úÖ –§–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞ (12, 23, 55)');
  console.log('‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: X –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏–π, O –¥–ª—è –ø—Ä–æ–º–∞—Ö–æ–≤, S –¥–ª—è –∫–æ—Ä–∞–±–ª–µ–π');
  console.log('‚úÖ –î–≤–∞ –ø–æ–ª—è: –ø–æ–ª–µ –∏–≥—Ä–æ–∫–∞ –∏ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞');
  console.log('‚úÖ –ò–ò —Å —Ä–µ–∂–∏–º–∞–º–∏ hunt/target');
  console.log('‚úÖ –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π');
  console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∞—Ç–∞–∫–∏');
  
  console.log('\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ò–≥—Ä–∞ –¢–û–ß–ù–û —Ä–µ–∞–ª–∏–∑—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–µ—Ö–∞–Ω–∏–∫—É!');
  console.log('üìù –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  console.log('üîß –£–ª—É—á—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –º–µ—Ö–∞–Ω–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMechanics(); 